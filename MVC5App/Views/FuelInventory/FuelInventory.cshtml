@model MVC5App.Models.FuelInventoryViewModel
@{
    ViewBag.Title = "Fuel Inventory " + ViewData["tank"];

    // build up a sorted dictionary with a default value of 0
    // we need to do this step in order to account for entries that do not exist in the database
    var recentInventory = new SortedDictionary<DateTime, decimal>();
    var today = DateTime.Today; // store today in case the day changes in the middle of a query
    today = new DateTime(today.Year, today.Month, today.Day); // strip hours/mins/secs/etc
    for (int i = 0; i < 12; i++)
    {
        DateTime date = today.AddDays(-i);
        recentInventory[date] = 0;
    }
    var yearInventory = new SortedDictionary<DateTime, decimal>();
    var month = new DateTime(today.Year, today.Month, 1);
    for (int i = 0; i < 12; i++)
    {
        DateTime date = month.AddMonths(-i);
        yearInventory[date] = 0;
    }

    // connect to SQL
    using (var sql = new Tools.OurSql())
    {
        // query fuel inventory and populate dictionary
        var rdr = sql.Query("SELECT OnDate, FuelAmount " +
                            "FROM FuelInventory" + ViewData["tank"] + " " +
                            "WHERE OnDate > Subdate(Curdate(), INTERVAL 12 DAY) " +
                            "AND OnDate <= Curdate()");
        while (rdr.Read())
        {
            // store fuel values from the database
            recentInventory[rdr.GetDateTime(0)] = rdr.GetDecimal(1);
        }

        // query fuel inventory and populate dictionary
        rdr.Close();
        rdr = sql.Query("SELECT YEAR(OnDate), MONTH(OnDate), AVG(FuelAmount) " +
                            "FROM FuelInventory" + ViewData["tank"] + " " +
                            "WHERE OnDate > Subdate(Curdate(), INTERVAL 1 YEAR) " +
                            "AND OnDate <= Curdate() " +
                            "GROUP BY YEAR(OnDate), MONTH(OnDate)");
        while (rdr.Read())
        {
            // store fuel values from the database
            DateTime itemMonth = new DateTime(rdr.GetInt32(0), rdr.GetInt32(1), 1);
            yearInventory[itemMonth] = rdr.GetDecimal(2);
        }
    }
}
<h1 class="col-md-9">Fuel Inventory @ViewData["tank"]</h1>

<main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
    <div>
        <div style="float: left">
            <ul class="nav flex-column">
                <li class="nav-item">
                    @{
                        if (ViewData["tank"].ToString() == "A")
                        {
                            <a class="nav-current" href="@Url.Content("../A/")">Tank A</a>
                        }
                        else
                        {
                            <a href="@Url.Content("../A/")">Tank A</a>
                        }
                    }
                </li>
            </ul>
        </div>
        <div style="float:left">
            <ul class="nav flex-column">
                <li class="nav-item">
                    @{
                        if (ViewData["tank"].ToString() == "B")
                        {
                            <a class="nav-current" href="@Url.Content("../B/")">Tank B</a>
                        }
                        else
                        {
                            <a href="@Url.Content("../B/")">Tank B</a>
                        }
                    }
                </li>
            </ul>
        </div>
        <div style="clear:both"></div>
    </div>

    <div class="left-half">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h2>Recent</h2>
        </div>

        <canvas class="my-4" id="weekChart" width="800" height="450"></canvas>

        <div class="table-responsive top-margin">
            <table class="table table-striped table-sm">
                <col style="width:50%">
                <col style="width:50%">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        // display a table of recent values
                        // allow the values to be altered by clicking them
                        foreach (var item in recentInventory)
                        {
                            var key = item.Key.ToString("MMMM d, yyyy"); // <-- Key for alterable
                            var value = string.Format("{0:F5}", item.Value); // <-- Value for alterable
                            var actionName = this.ViewContext.RouteData.Values["action"].ToString();
                            var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
                            <tr>
                                @* display the key (date) *@
                                <td>@key</td>
                                <td>
                                    @* allow the value (fuel amount) to be altered *@
                                    <a onclick="alter('@key', '@value')" href="#edit" id="@key-display">@value gallons</a>
                                    @using (Html.BeginForm(actionName + "/", controllerName, FormMethod.Post, new { @id = @key + "-alter", @style = "display:none" }))
                                    {
                                        @Html.TextBoxFor(m => m.FuelAmount, // <--- Value for alterable
                                                     new { @class = "forminput", @Value = @value })
                                        @Html.TextBoxFor(m => m.OnDate,     // <---  Key for alterable
                                                     new { @style = "display:none", @Value = @key })
                                        <input class="forminput formsubmit" type="submit" value="Save" />
                                    }
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="right-half">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h2>Past Year</h2>
        </div>

        <canvas class="my-4" id="yearChart" width="800" height="450"></canvas>

        <div class="table-responsive top-margin">
            <table class="table table-striped table-sm">
                <col style="width:50%">
                <col style="width:50%">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Average</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        // display a table of values for the year
                        // allows the user to navigate to single month displays
                        foreach (var item in yearInventory)
                        {
                            var key = item.Key.ToString("MMMM yyyy");
                            var value = item.Value;
                            var actionName = this.ViewContext.RouteData.Values["action"].ToString();
                            var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
                            <tr>
                                @* display the key (date) and create a link to a month view *@
                                <td><a href="@item.Key.ToString("yyyy-MM")">@key</a></td>
                                @* display the value (fuel amount) *@
                                <td>@string.Format("{0:F5}", value) gallons</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</main>

@*fill out the weekly and yearly charts with javascript*@
@Helpers.FillChart(Html, "weekChart",
                recentInventory.Keys.Select(x => x.ToString("MM / dd")).ToArray(),
                recentInventory.Values.Select(x => x.ToString()).ToArray(),
                recentInventory.Keys.Select(x => x.ToString("MMM d")).ToArray())
@Helpers.FillChart(Html, "yearChart",
                yearInventory.Keys.Select(x => x.ToString("MM / yy")).ToArray(),
                yearInventory.Values.Select(x => x.ToString()).ToArray(),
                yearInventory.Keys.Select(x => x.ToString("MMM yyyy")).ToArray())