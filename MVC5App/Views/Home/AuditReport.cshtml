@using MVC5App.Models
@using MySql.Data.MySqlClient
@model MVC5App.Models.AuditViewModel

@{
    ViewBag.Title = "Audit Report";

    // build up a sorted dictionary with a default value of 0
    // we need to do this step in order to account for entries that do not exist in the database
    //var recentAudits = new SortedDictionary<DateTime, decimal>();
    var recentAudits = new List<AuditViewModel>{};
    //Not sure if needed
    var today = DateTime.Today; // store today in case the day changes in the middle of a query
    today = new DateTime(today.Year, today.Month, today.Day); // strip hours/mins/secs/etc


    // connect to SQL
    using (var sql = new Tools.OurSql())
    {
        // query fuel inventory and populate dictionary
        var rdr = sql.Query("SELECT * " +
                            "FROM AuditLog ");
        while (rdr.Read())
        {
            // store fuel values from the database
            // (LogID, Entity, ActionType, OnDate, PreviousValue, UpdatedValue)

            var id = rdr.GetInt16(0);
            var table = rdr.GetString(1) ?? "";
            var actionType = rdr.GetString(2) ?? "Unknown";
            var onDate = rdr.GetDateTime(3);
 
            //Check if the values are empty (nullable in sql)
            var previousValue = rdr.IsDBNull(4) ? "" : rdr.GetString(4);
            var updatedValue = rdr.IsDBNull(5) ? "" : rdr.GetString(5);
            try
            {
                var tempAudit = new AuditViewModel(id, table, actionType, onDate, previousValue, updatedValue);
                recentAudits.Add(tempAudit);
            }
            catch{ }

        }
        rdr.Close();

    }
}

<h1 class="col-md-9">Audit Report</h1>

<main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
    <div class="">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
            <h2>Recent Changes</h2>
        </div>
        
        <!-- Filter and Sort Buttons-->
        <div>
            <button type="button" class="btn btn-default" data-toggle="button">All Tables</button>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="filterCheckbox1" value="Fuel Inventory"/>
                <label class="form-check-label" for="filterCheckbox1"></label>
            </div>
        </div>
        <!-- End buttons-->
        <div class="table-responsive top-margin">
            <table class="table table-striped table-md">
                <thead>
                    <tr>
                        <th>LogID</th>
                        <th>Table</th>
                        <th>Action Type</th>
                        <th>Updated Value</th>
                        <th>Previous Value</th>
                        <th>Date</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        recentAudits.Sort((x, y) => y.logID.CompareTo(x.logID)); // sort by most recent logID (default behavior)
                        foreach (var audit in recentAudits)
                        {
                            var logID = audit.logID;
                            var tableName = audit.tableName;
                            var actionType = audit.databaseAction;
                            var onDate = audit.onDate.ToString("MMMM d, yyyy");
                            var previousValue = audit.previousValue;
                            var updatedValue = audit.updatedValue;

                            var actionName = this.ViewContext.RouteData.Values["action"].ToString();
                            var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
                            <!-- Begin Row-->
                            <tr>
                                
                                <td>@logID</td>
                                <td>@tableName</td>
                                <td>@actionType</td>
                                <td>@updatedValue</td>
                                <td>@previousValue</td>
                                <td>@onDate</td>

                            </tr>
                            <!-- End Row-->
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</main>

