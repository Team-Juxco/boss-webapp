@{
    ViewBag.Title = "Fuel";

    // build up a sorted dictionary with a default value of 0
    // we need to do this step in order to account for entries that do not exist in the database
    var weeklyInventory = new SortedDictionary<DateTime, decimal>();
    var today = DateTime.Today; // store today in case the day changes in the middle of a query
    for (int i = 0; i < 7; i++)
    {
        DateTime date = today.Subtract(new TimeSpan(i, 0, 0, 0));
        weeklyInventory[date] = 0;
    }

    // connect to SQL
    using (var sql = new Tools.OurSql())
    {
        // query fuel inventory and populate dictionary
        var rdr = sql.Query("SELECT OnDate, FuelAmount " +
                            "FROM FuelInventory " +
                            "WHERE OnDate >= Subdate(Curdate(), INTERVAL 1 week)");
        while (rdr.Read())
        {
            weeklyInventory[rdr.GetDateTime(0)] = rdr.GetDecimal(1);
        }
    }
}

<main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
        <h1 class="h2">Fuel Inventory</h1>
    </div>

    <canvas class="my-4" id="myChart" width="900" height="380"></canvas>
    <div class="table-responsive">
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @{
                    // display a table of values for the week
                    foreach (var item in weeklyInventory)
                    {
                        <tr>
                            <th>@item.Key.ToString("yyyy-MM-dd")</th>
                            <th>@item.Value</th>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</main>



<!-- Graphs -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
<script>
    var ctx = document.getElementById("myChart");
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [
                @{
                    // output the day of the week label for each item
                    foreach (var item in weeklyInventory)
                    {
                        // note: using Html.Raw so it will properly output a quote for javascript
                        @Html.Raw("'" + item.Key.DayOfWeek + "',")
                    }
                }
            ],
            datasets: [{
                data: [
                    @{
                        // output the value of each day to draw the graph
                        foreach (var item in weeklyInventory)
                        {
                            @(item.Value + ",")
                        }
                    }
                ],
                lineTension: 0,
                backgroundColor: 'transparent',
                borderColor: '#007bff',
                borderWidth: 4,
                pointBackgroundColor: '#007bff'
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: false
                    }
                }]
            },
            legend: {
                display: false,
            }
        }
    });
</script>
